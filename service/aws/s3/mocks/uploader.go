// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pomelo-la/go-toolkit/service/aws/s3 (interfaces: Uploader)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/uploader.go -package mock -mock_names Uploader=Uploader . Uploader
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "go.uber.org/mock/gomock"
)

// Uploader is a mock of Uploader interface.
type Uploader struct {
	ctrl     *gomock.Controller
	recorder *UploaderMockRecorder
}

// UploaderMockRecorder is the mock recorder for Uploader.
type UploaderMockRecorder struct {
	mock *Uploader
}

// NewUploader creates a new mock instance.
func NewUploader(ctrl *gomock.Controller) *Uploader {
	mock := &Uploader{ctrl: ctrl}
	mock.recorder = &UploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Uploader) EXPECT() *UploaderMockRecorder {
	return m.recorder
}

// PutObject mocks base method.
func (m *Uploader) PutObject(arg0 context.Context, arg1 *s3.PutObjectInput, arg2 ...func(*s3.Options)) (*s3.PutObjectOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutObject", varargs...)
	ret0, _ := ret[0].(*s3.PutObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject.
func (mr *UploaderMockRecorder) PutObject(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*Uploader)(nil).PutObject), varargs...)
}
