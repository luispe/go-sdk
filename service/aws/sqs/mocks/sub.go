// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pomelo-la/go-toolkit/service/aws/sqs (interfaces: Consumer)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/sub.go -package mock -mock_names Consumer=Consumer . Consumer
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	gomock "go.uber.org/mock/gomock"
)

// Consumer is a mock of Consumer interface.
type Consumer struct {
	ctrl     *gomock.Controller
	recorder *ConsumerMockRecorder
}

// ConsumerMockRecorder is the mock recorder for Consumer.
type ConsumerMockRecorder struct {
	mock *Consumer
}

// NewConsumer creates a new mock instance.
func NewConsumer(ctrl *gomock.Controller) *Consumer {
	mock := &Consumer{ctrl: ctrl}
	mock.recorder = &ConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Consumer) EXPECT() *ConsumerMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *Consumer) DeleteMessage(arg0 context.Context, arg1 *sqs.DeleteMessageInput, arg2 ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMessage", varargs...)
	ret0, _ := ret[0].(*sqs.DeleteMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *ConsumerMockRecorder) DeleteMessage(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*Consumer)(nil).DeleteMessage), varargs...)
}

// ReceiveMessage mocks base method.
func (m *Consumer) ReceiveMessage(arg0 context.Context, arg1 *sqs.ReceiveMessageInput, arg2 ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReceiveMessage", varargs...)
	ret0, _ := ret[0].(*sqs.ReceiveMessageOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *ConsumerMockRecorder) ReceiveMessage(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMessage", reflect.TypeOf((*Consumer)(nil).ReceiveMessage), varargs...)
}
